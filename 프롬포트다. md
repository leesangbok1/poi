│  > > 핵심 정보 인증 관련 아이콘을 왼쪽 단에 하나 만들어줘 /// 그리고 모든 아이디 옆에 사용자 인증 정보를 표시한 것이 맞아?  반영이 되었어? /// 그리고 실제 구현되는 게시글과 같이  │ 
│       │ │    운영되려면 지금 a/b  게시글 예시를 2배로 늘리고 카테고리 별로 실제로 게시글이 분류가 되어야 하고 인기순 최신순으로 실제로 분류가 되어야 하며 좋아요 하트 따봉         │ 
│    이모티콘으로 표시 │ │     공유 기능을  누를 수 있는 기능도 추가해줘 
프롬프트 11/12: 답변 채택 및 '좋아요' 기능 (데이터 업데이트만)
[Goal] Implement the UI for selecting and liking answers. The logic will only update the Firestore documents.

[Instructions for AI Developer]

Answer Selection: If the current user is the author of the question, display a "Select as Best Answer" button. Clicking this must add an isAccepted: true field to that answer document in Firestore.

Like Functionality: Add a "Like" button and a counter to every answer. Clicking "Like" must update a likes field (e.g., an array of user IDs) in the corresponding answer document.

Manual Point Logic: Since Cloud Functions are not used, point allocation must be handled on the client-side for now. When an action occurs (post, answer, accept), update the user's points in the users collection directly from the client.

프롬프트 12/12: 관리자 대시보드
[Goal] Create a basic dashboard for administrative tasks like viewing reported content. 및 게시글 작성 수정할 수 있는 기능도 추가(우선은 아직 사용자가 없기 때문에 지금 페이지에는 관리자 모드가 전제가 됨)

[Instructions for AI Developer]

Admin Role: Assume an isAdmin: true field can be manually added to a user document in Firestore for testing.

Admin Route: Create a new page/view at /admin. This page must only be accessible if the logged-in user has isAdmin: true.

Dashboard UI: Design a simple dashboard with sections for: 'User Verification Requests', 'Reported Content', and 'Key Metrics'.